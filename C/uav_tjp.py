# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _uav_tjp
else:
    import _uav_tjp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class uav_tjp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Env_dim = property(_uav_tjp.uav_tjp_Env_dim_get, _uav_tjp.uav_tjp_Env_dim_set)
    states = property(_uav_tjp.uav_tjp_states_get, _uav_tjp.uav_tjp_states_set)
    prev_action = property(_uav_tjp.uav_tjp_prev_action_get, _uav_tjp.uav_tjp_prev_action_set)
    destination = property(_uav_tjp.uav_tjp_destination_get, _uav_tjp.uav_tjp_destination_set)

    def __init__(self, dim, grp_uper):
        _uav_tjp.uav_tjp_swiginit(self, _uav_tjp.new_uav_tjp(dim, grp_uper))
    __swig_destroy__ = _uav_tjp.delete_uav_tjp

    def imp_uav(self, stt, prevAct, dest):
        return _uav_tjp.uav_tjp_imp_uav(self, stt, prevAct, dest)

    def go_forward(self):
        return _uav_tjp.uav_tjp_go_forward(self)

# Register uav_tjp in _uav_tjp:
_uav_tjp.uav_tjp_swigregister(uav_tjp)
cvar = _uav_tjp.cvar
maxUavcount = cvar.maxUavcount

class group(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    setTag = property(_uav_tjp.group_setTag_get, _uav_tjp.group_setTag_set)
    count = property(_uav_tjp.group_count_get, _uav_tjp.group_count_set)

    def update(self, Stt):
        return _uav_tjp.group_update(self, Stt)

    def setCount(self):
        return _uav_tjp.group_setCount(self)

    def sortTag(self):
        return _uav_tjp.group_sortTag(self)

    def get(self, i, n):
        return _uav_tjp.group_get(self, i, n)

    def gCount(self, i):
        return _uav_tjp.group_gCount(self, i)

    def __init__(self):
        _uav_tjp.group_swiginit(self, _uav_tjp.new_group())
    __swig_destroy__ = _uav_tjp.delete_group

# Register group in _uav_tjp:
_uav_tjp.group_swigregister(group)

class RewardStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    R1 = property(_uav_tjp.RewardStr_R1_get, _uav_tjp.RewardStr_R1_set)
    R2 = property(_uav_tjp.RewardStr_R2_get, _uav_tjp.RewardStr_R2_set)
    R3 = property(_uav_tjp.RewardStr_R3_get, _uav_tjp.RewardStr_R3_set)

    def sum(self, level):
        return _uav_tjp.RewardStr_sum(self, level)

    def setWorst(self):
        return _uav_tjp.RewardStr_setWorst(self)

    def setDefult(self, _def):
        return _uav_tjp.RewardStr_setDefult(self, _def)

    def __init__(self):
        _uav_tjp.RewardStr_swiginit(self, _uav_tjp.new_RewardStr())
    __swig_destroy__ = _uav_tjp.delete_RewardStr

# Register RewardStr in _uav_tjp:
_uav_tjp.RewardStr_swigregister(RewardStr)

class Tree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    near = property(_uav_tjp.Tree_near_get, _uav_tjp.Tree_near_set)
    node = property(_uav_tjp.Tree_node_get, _uav_tjp.Tree_node_set)
    count = property(_uav_tjp.Tree_count_get, _uav_tjp.Tree_count_set)
    cost = property(_uav_tjp.Tree_cost_get, _uav_tjp.Tree_cost_set)

    def __init__(self):
        _uav_tjp.Tree_swiginit(self, _uav_tjp.new_Tree())
    __swig_destroy__ = _uav_tjp.delete_Tree

# Register Tree in _uav_tjp:
_uav_tjp.Tree_swigregister(Tree)


def prime(cost, n, s):
    return _uav_tjp.prime(cost, n, s)

def min_edge(b, dist, n):
    return _uav_tjp.min_edge(b, dist, n)
class Spliter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    level_node_count = property(_uav_tjp.Spliter_level_node_count_get, _uav_tjp.Spliter_level_node_count_set)
    levels = property(_uav_tjp.Spliter_levels_get, _uav_tjp.Spliter_levels_set)

    def __init__(self, count):
        _uav_tjp.Spliter_swiginit(self, _uav_tjp.new_Spliter(count))

    def sum_until(self, lev):
        return _uav_tjp.Spliter_sum_until(self, lev)
    __swig_destroy__ = _uav_tjp.delete_Spliter

# Register Spliter in _uav_tjp:
_uav_tjp.Spliter_swigregister(Spliter)


def convert(iAction, nUAV, res):
    return _uav_tjp.convert(iAction, nUAV, res)

def Reward(prev_action, Stt, destination, Act, groupList, nUAV):
    return _uav_tjp.Reward(prev_action, Stt, destination, Act, groupList, nUAV)

def direction_rew(prev_action, cur_pos, act):
    return _uav_tjp.direction_rew(prev_action, cur_pos, act)
class point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_uav_tjp.point_x_get, _uav_tjp.point_x_set)
    y = property(_uav_tjp.point_y_get, _uav_tjp.point_y_set)

    def __init__(self, a=0, b=0):
        _uav_tjp.point_swiginit(self, _uav_tjp.new_point(a, b))
    __swig_destroy__ = _uav_tjp.delete_point

    def __add__(self, second):
        return _uav_tjp.point___add__(self, second)

    def __sub__(self, second):
        return _uav_tjp.point___sub__(self, second)

    def __eq__(self, second):
        return _uav_tjp.point___eq__(self, second)

    def distance(self, second):
        return _uav_tjp.point_distance(self, second)

    def isValidPoint(self, Env_dim):
        return _uav_tjp.point_isValidPoint(self, Env_dim)

# Register point in _uav_tjp:
_uav_tjp.point_swigregister(point)



